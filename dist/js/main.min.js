function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(t,e){var n;if(t)return"string"==typeof t?_arrayLikeToArray(t,e):"Map"===(n="Object"===(n={}.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(t,e):void 0}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=Array(e);n<e;n++)o[n]=t[n];return o}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}document.addEventListener("DOMContentLoaded",function(){console.log("XLSX:","undefined"==typeof XLSX?"undefined":_typeof(XLSX));var o,s=document.getElementById("task-form"),a=document.getElementById("task-list"),t=document.querySelector(".completed-tasks"),r=document.getElementById("completed-task-list"),e=document.getElementById("view-completed-tasks"),n=document.getElementById("back-to-active-tasks"),i=document.getElementById("filter-status"),c=document.getElementById("sort-tasks"),l=document.getElementById("delete-all-tasks"),u=document.getElementById("export-to-excel"),d=[];function m(t,e){var n;o.readyState===WebSocket.OPEN?(n={type:"updateTasks",action:t,task:e},console.log("Sending message to server:",n),o.send(JSON.stringify(n))):console.warn("WebSocket is not open. Message not sent:",{action:t,task:e}),console.log("Attempting to send message:",{action:t,task:e})}function p(){a.innerHTML="",r.innerHTML="";var o=i.value,n=c.value;_toConsumableArray(d).sort(function(t,e){return"attention"===t.status&&"attention"!==e.status?-1:"attention"===e.status&&"attention"!==t.status?1:"attention"===t.status&&"attention"===e.status?new Date(t.attentionAt)-new Date(e.attentionAt):"unitNumber"===n?t.unitNumber.localeCompare(e.unitNumber):"created"===n?t.id-e.id:0}).forEach(function(t){var e,n;"all"!==o&&t.status!==o||("completed"===t.status?(e=t,(n=document.createElement("li")).dataset.id=e.id,n.classList.add("completed"),n.innerHTML="\n            <span><strong>".concat(e.unitNumber,"</strong> - ").concat(e.location,"</span>\n            <span>").concat(e.action," → ").concat(e.destination,"</span>\n            <span>").concat(e.message||"No message",'</span>\n            <button class="restore-btn">Restore</button>\n        '),r.appendChild(n)):(e=t,(n=document.createElement("li")).dataset.id=e.id,n.classList.add(e.status),n.innerHTML="\n            <span><strong>".concat(e.unitNumber,"</strong> - ").concat(e.location,"</span>\n            <span>").concat(e.action," → ").concat(e.destination,"</span>\n            <span>").concat(e.message||"No message",'</span>\n            <div>\n                <button class="edit-message-btn">Edit Message</button>\n                <button class="in-progress-btn">In Progress</button>\n                <button class="completed-btn">Complete</button>\n                <button class="attention-btn">Attention</button>\n            </div>\n        '),a.appendChild(n)))})}!function t(){(o=new WebSocket("wss://hermesapp.online/")).onopen=function(){console.log("Connected to WebSocket server.")},o.onmessage=function(t){var e,n,t=JSON.parse(t.data);console.log("Received message:",t),"initialSync"===t.type?(d=t.tasks,p()):"updateTasks"===t.type&&(e=t.action,n=t.task,-1!==(t=d.findIndex(function(t){return t.id===n.id}))?d[t]=n:"add"===e&&d.push(n),p())},o.onerror=function(t){console.error("WebSocket error:",t)},o.onclose=function(){console.log("WebSocket connection closed. Retrying in 3 seconds..."),setTimeout(t,3e3)}}(),s.addEventListener("submit",function(t){t.preventDefault();var t=document.getElementById("unit-number").value.trim(),e=document.getElementById("location").value.trim(),n=document.getElementById("action").value,o=document.getElementById("destination").value.trim(),a=document.getElementById("message").value.trim();t&&e&&n&&o?(t={id:Date.now().toString(),unitNumber:t,location:e,action:n,destination:o,message:a,status:"neutral",startedAt:null,completedAt:null,duration:null},console.log("New task to add:",t),d.push(t),m("add",t),p(),s.reset()):alert("All required fields must be filled out.")}),u.addEventListener("click",function(){console.log("Export button clicked");var t,e=d.filter(function(t){return"completed"===t.status});0===e.length?alert("No completed tasks to export."):(e=e.map(function(t){return{"Unit Number":t.unitNumber,Location:t.location,Action:t.action,Destination:t.destination,Message:t.message||"No message",Status:t.status,"Started At":t.startedAt||"Not started","Completed At":t.completedAt||"Not completed",Duration:t.duration||"N/A"}}),t=XLSX.utils.book_new(),e=XLSX.utils.json_to_sheet(e),XLSX.utils.book_append_sheet(t,e,"Completed Tasks"),XLSX.writeFile(t,"Completed_Tasks_Report.xlsx"))}),e.addEventListener("click",function(){document.querySelector(".task-list").style.display="none",t.style.display="block"}),n.addEventListener("click",function(){t.style.display="none",document.querySelector(".task-list").style.display="block"}),a.addEventListener("click",function(t){var e,t=t.target,n=t.closest("li").dataset.id,o=d.find(function(t){return t.id===n});o&&(t.classList.contains("edit-message-btn")?null!==(e=prompt("Enter new message:",o.message||""))&&(o.message=e.trim(),m("update",o),p()):t.classList.contains("in-progress-btn")?(o.status="in-progress"===o.status?"neutral":"in-progress","in-progress"!==o.status||o.startedAt||(o.startedAt=(new Date).toISOString()),m("update",o),p()):t.classList.contains("completed-btn")?(o.status="completed",o.completedAt=(new Date).toISOString(),o.startedAt&&(e=Math.round((new Date(o.completedAt)-new Date(o.startedAt))/6e4),o.duration="".concat(e," min")),m("update",o),p()):t.classList.contains("attention-btn")&&(o.status="attention"===o.status?"neutral":"attention",m("update",o),p()))}),r.addEventListener("click",function(t){var e,t=t.target;t.classList.contains("restore-btn")&&(e=t.closest("li").dataset.id,t=d.find(function(t){return t.id===e}))&&(t.status="neutral",m("update",t),p())}),l.addEventListener("click",function(){confirm("Are you sure you want to delete all tasks? This action cannot be undone.")&&(d=[],m("clear",null),p())})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
