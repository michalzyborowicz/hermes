function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){var n;if(e)return"string"==typeof e?_arrayLikeToArray(e,t):"Map"===(n="Object"===(n={}.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:n)||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,s=Array(t);n<t;n++)s[n]=e[n];return s}var socket,taskForm=document.getElementById("task-form"),taskList=document.getElementById("task-list"),completedTasksSection=document.querySelector(".completed-tasks"),completedTaskList=document.getElementById("completed-task-list"),viewCompletedTasksBtn=document.getElementById("view-completed-tasks"),backToActiveTasksBtn=document.getElementById("back-to-active-tasks"),filterStatus=document.getElementById("filter-status"),sortTasks=document.getElementById("sort-tasks"),tasks=[],renderedTaskIds=new Set;function connectWebSocket(){(socket=new WebSocket("ws://192.168.50.164:8080")).onopen=function(){console.log("Connected to WebSocket server.")},socket.onmessage=function(e){try{var t=JSON.parse(e.data);console.log("Received message:",t),"updateTasks"===t.type&&handleServerUpdate(t.task)}catch(e){console.error("Error processing WebSocket message:",e.message)}},socket.onclose=function(){console.error("WebSocket connection closed. Retrying in 3 seconds..."),setTimeout(connectWebSocket,3e3)},socket.onerror=function(e){console.error("WebSocket error:",e.message)}}function syncWithServer(e,t){socket.readyState===WebSocket.OPEN?socket.send(JSON.stringify({type:"updateTasks",action:e,task:t})):console.error("WebSocket is not open. Message not sent:",{action:e,task:t})}function handleServerUpdate(t){var e=tasks.findIndex(function(e){return e.id===t.id});-1!==e?tasks[e]=t:tasks.push(t),saveTasksToLocalStorage(),renderAllTasks()}function renderAllTasks(){var t=filterStatus.value,n=sortTasks.value;_toConsumableArray(tasks).sort(function(e,t){return"unitNumber"===n?e.unitNumber.localeCompare(t.unitNumber):"created"===n?e.id-t.id:0}).forEach(function(e){renderedTaskIds.has(e.id)||"all"!==t&&e.status!==t||("completed"===e.status?renderCompletedTask:renderTask)(e)})}function renderTask(e){var t;renderedTaskIds.has(e.id)||((t=document.createElement("li")).dataset.id=e.id,t.classList.add(e.status),t.innerHTML="\n        <span><strong>".concat(e.unitNumber,"</strong> - ").concat(e.location,"</span>\n        <span>").concat(e.action," → ").concat(e.destination,"</span>\n        <span>").concat(e.message||"No message",'</span>\n        <div>\n            <button class="edit-message-btn">Edit Message</button>\n            <button class="in-progress-btn">In Progress</button>\n            <button class="completed-btn">Complete</button>\n            <button class="attention-btn">Attention</button>\n        </div>\n    '),taskList.appendChild(t),renderedTaskIds.add(e.id))}function renderCompletedTask(e){var t;renderedTaskIds.has(e.id)||((t=document.createElement("li")).dataset.id=e.id,t.classList.add("completed"),t.innerHTML="\n        <span><strong>".concat(e.unitNumber,"</strong> - ").concat(e.location,"</span>\n        <span>").concat(e.action," → ").concat(e.destination,"</span>\n        <span>").concat(e.message||"No message",'</span>\n        <button class="restore-btn">Restore</button>\n    '),completedTaskList.appendChild(t),renderedTaskIds.add(e.id))}function saveTasksToLocalStorage(){localStorage.setItem("tasks",JSON.stringify(tasks))}function loadTasksFromLocalStorage(){var e=localStorage.getItem("tasks");return e?JSON.parse(e):[]}viewCompletedTasksBtn.addEventListener("click",function(){completedTasksSection.style.display="block",document.querySelector(".task-list").style.display="none"}),backToActiveTasksBtn.addEventListener("click",function(){completedTasksSection.style.display="none",document.querySelector(".task-list").style.display="block"}),taskForm.addEventListener("submit",function(e){e.preventDefault();var e=document.getElementById("unit-number").value.trim(),t=document.getElementById("location").value.trim(),n=document.getElementById("action").value,s=document.getElementById("destination").value.trim(),a=document.getElementById("message").value.trim();e&&t&&n&&s?(e={id:Date.now().toString(),unitNumber:e,location:t,action:n,destination:s,message:a,status:"neutral",startedAt:null,completedAt:null,duration:null},tasks.push(e),saveTasksToLocalStorage(),syncWithServer("add",e),renderAllTasks(),taskForm.reset()):alert("All required fields must be filled out.")}),taskList.addEventListener("click",function(e){var e=e.target,t=e.closest("li").dataset.id,n=tasks.find(function(e){return e.id===t});n&&e.classList.contains("edit-message-btn")&&null!==(e=prompt("Enter new message:",n.message||""))&&(n.message=e.trim(),saveTasksToLocalStorage(),syncWithServer("update",n),renderAllTasks())}),tasks=loadTasksFromLocalStorage(),renderAllTasks(),connectWebSocket();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsidmlld0NvbXBsZXRlZFRhc2tzQnRuIiwidGFza0Zvcm0iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidGFza0xpc3QiLCJjb21wbGV0ZWRUYXNrc1NlY3Rpb24iLCJxdWVyeVNlbGVjdG9yIiwiY29tcGxldGVkVGFza0xpc3QiLCJiYWNrVG9BY3RpdmVUYXNrc0J0biIsImZpbHRlclN0YXR1cyIsInNvcnRUYXNrcyIsInNvY2tldCIsIldlYlNvY2tldCIsInRhc2tzIiwiY29uc29sZSIsInJlbmRlcmVkVGFza0lkcyIsIm9ubWVzc2FnZSIsImV2ZW50IiwibWVzc2FnZSIsInBhcnNlIiwiZGF0YSIsImxvZyIsInR5cGUiLCJoYW5kbGVTZXJ2ZXJVcGRhdGUiLCJ0YXNrIiwiZXJyb3IiLCJvbmNsb3NlIiwic2V0VGltZW91dCIsImNvbm5lY3RXZWJTb2NrZXQiLCJvbmVycm9yIiwic3luY1dpdGhTZXJ2ZXIiLCJhY3Rpb24iLCJyZWFkeVN0YXRlIiwiT1BFTiIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cGRhdGVkVGFzayIsImV4aXN0aW5nVGFza0luZGV4IiwicHVzaCIsInNhdmVUYXNrc1RvTG9jYWxTdG9yYWdlIiwicmVuZGVyQWxsVGFza3MiLCJ2YWx1ZSIsInNvcnRCeSIsIl90b0NvbnN1bWFibGVBcnJheSIsInNvcnQiLCJhIiwiYiIsImZpbHRlciIsInVuaXROdW1iZXIiLCJzb3J0ZWRUYXNrcyIsImlkIiwiZm9yRWFjaCIsImhhcyIsInN0YXR1cyIsInJlbmRlckNvbXBsZXRlZFRhc2siLCJyZW5kZXJUYXNrIiwiY3JlYXRlRWxlbWVudCIsImRhdGFzZXQiLCJsaSIsImNsYXNzTGlzdCIsImlubmVySFRNTCIsImNvbmNhdCIsImxvY2F0aW9uIiwiZGVzdGluYXRpb24iLCJhcHBlbmRDaGlsZCIsInRhc2tFbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInRhcmdldCIsImNvbnRhaW5zIiwibmV3TWVzc2FnZSIsInByb21wdCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJsb2FkVGFza3NGcm9tTG9jYWxTdG9yYWdlIiwic2F2ZWRUYXNrcyIsImdldEl0ZW0iLCJzdHlsZSIsImRpc3BsYXkiLCJwcmV2ZW50RGVmYXVsdCIsInRyaW0iLCJEYXRlIiwic3RhcnRlZEF0IiwiY29tcGxldGVkQXQiLCJkdXJhdGlvbiIsIm5ld1Rhc2siLCJyZXNldCIsInRhc2tJZCIsImNsb3Nlc3QiLCJmaW5kIiwidCJdLCJtYXBwaW5ncyI6InM4QkFDQSxJQUlNQSxPQUpBQyxTQUFXQyxTQUFTQyxlQUFlLFdBQVcsRUFDOUNDLFNBQVdGLFNBQVNDLGVBQWUsV0FBVyxFQUM5Q0Usc0JBQXdCSCxTQUFTSSxjQUFjLGtCQUFrQixFQUNqRUMsa0JBQW9CTCxTQUFTQyxlQUFlLHFCQUFxQixFQUNqRUgsc0JBQXdCRSxTQUFTQyxlQUFlLHNCQUFzQixFQUN0RUsscUJBQXVCTixTQUFTQyxlQUFlLHNCQUFzQixFQUNyRU0sYUFBZVAsU0FBU0MsZUFBZSxlQUFlLEVBUDVETyxVQUFBUixTQUFBQyxlQUFBLFlBQUEsRUFHTUUsTUFBQUEsR0FDQUUsZ0JBQW9CTCxJQUFBQSxJQUkxQixTQUFNUSxvQkFTTEMsT0FBUyxJQUFJQyxVQUFVLDBCQUEwQixHQU45Q0MsT0FBVSxXQUNkQyxRQUFNQyxJQUFBQSxnQ0FBNEIsQ0FDbEMsRUFFQUosT0FBQUssVUFBQSxTQUFBQyxHQUNBLElBQ0NOLElBQU1PLEVBQU9OLEtBQVNPLE1BQUNGLEVBQUFHLElBQUEsRUFTckJOLFFBQVFPLElBQUksb0JBQXFCSCxDQUFPLEVBTjdCLGdCQUFaSixFQUFXUSxNQUNYQyxtQkFBQUwsRUFBQU0sSUFBQSxDQVlBLENBVEEsTUFBSUMsR0FRSFgsUUFQTUksTUFBTyxzQ0FBeUJPLEVBQUFQLE9BQUEsQ0FRdkMsQ0FDRCxFQUVBUCxPQU5FZSxRQUFBLFdBT0RaLFFBTkVXLE1BQU9BLHVEQUFPLEVBT2hCRSxXQU5RQyxpQkFBTyxHQUFBLENBT2hCLEVBRUFqQixPQUxN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REFuQixFQUFBb0IsUUFBQSxJQUFBLEVBQ1NoRCxRQUEwQlcsR0FFbkMxQixFQUFBWCxNQUFBMkUsS0FBQSxTQUFBQyxHQUFBLE9BQUFBLEVBQUF2QyxLQUFBb0MsQ0FBQSxDQUFBLEVBaEJNOUQsR0FtQk4yQyxFQUFTTSxVQUFBQSxTQUFBQSxrQkFBNEIsR0FFbkIsUUFEWEMsRUFBYUgsT0FBQUEscUJBQTZCL0MsRUFBQU4sU0FBQSxFQUFBLEtBRWpETSxFQUFBTixRQUFBbUQsRUFBQVUsS0FBQSxFQWhCR3hDLHdCQUF3QixFQWtCM0JULGVBQUEsU0FBQU4sQ0FBQSxFQUNBWCxlQUFRNEQsRUFkUixDQUFDLEVBY0Q1RCxNQUFRNEQsMEJBQTBCLEVBQ2xDakMsZUFBZSxFQUNmWixpQkFBaUIiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTZWxlY3QgRE9NIGVsZW1lbnRzXG5jb25zdCB0YXNrRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrLWZvcm0nKVxuY29uc3QgdGFza0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFzay1saXN0JylcbmNvbnN0IGNvbXBsZXRlZFRhc2tzU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb21wbGV0ZWQtdGFza3MnKVxuY29uc3QgY29tcGxldGVkVGFza0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29tcGxldGVkLXRhc2stbGlzdCcpXG5jb25zdCB2aWV3Q29tcGxldGVkVGFza3NCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlldy1jb21wbGV0ZWQtdGFza3MnKVxuY29uc3QgYmFja1RvQWN0aXZlVGFza3NCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFjay10by1hY3RpdmUtdGFza3MnKVxuY29uc3QgZmlsdGVyU3RhdHVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbHRlci1zdGF0dXMnKVxuY29uc3Qgc29ydFRhc2tzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvcnQtdGFza3MnKVxuXG4vLyBBcnJheSB0byBzdG9yZSB0YXNrc1xubGV0IHRhc2tzID0gW11cbmNvbnN0IHJlbmRlcmVkVGFza0lkcyA9IG5ldyBTZXQoKSAvLyBUcmFjayByZW5kZXJlZCB0YXNrc1xubGV0IHNvY2tldFxuXG4vLyBDb25uZWN0IHRvIFdlYlNvY2tldCBzZXJ2ZXJcbmZ1bmN0aW9uIGNvbm5lY3RXZWJTb2NrZXQoKSB7XG5cdHNvY2tldCA9IG5ldyBXZWJTb2NrZXQoJ3dzOi8vMTkyLjE2OC41MC4xNjQ6ODA4MCcpIC8vIFJlcGxhY2Ugd2l0aCB5b3VyIElQXG5cblx0c29ja2V0Lm9ub3BlbiA9ICgpID0+IHtcblx0XHRjb25zb2xlLmxvZygnQ29ubmVjdGVkIHRvIFdlYlNvY2tldCBzZXJ2ZXIuJylcblx0fVxuXG5cdHNvY2tldC5vbm1lc3NhZ2UgPSBldmVudCA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpXG5cdFx0XHRjb25zb2xlLmxvZygnUmVjZWl2ZWQgbWVzc2FnZTonLCBtZXNzYWdlKVxuXG5cdFx0XHRpZiAobWVzc2FnZS50eXBlID09PSAndXBkYXRlVGFza3MnKSB7XG5cdFx0XHRcdGhhbmRsZVNlcnZlclVwZGF0ZShtZXNzYWdlLnRhc2spXG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByb2Nlc3NpbmcgV2ViU29ja2V0IG1lc3NhZ2U6JywgZXJyb3IubWVzc2FnZSlcblx0XHR9XG5cdH1cblxuXHRzb2NrZXQub25jbG9zZSA9ICgpID0+IHtcblx0XHRjb25zb2xlLmVycm9yKCdXZWJTb2NrZXQgY29ubmVjdGlvbiBjbG9zZWQuIFJldHJ5aW5nIGluIDMgc2Vjb25kcy4uLicpXG5cdFx0c2V0VGltZW91dChjb25uZWN0V2ViU29ja2V0LCAzMDAwKVxuXHR9XG5cblx0c29ja2V0Lm9uZXJyb3IgPSBlcnJvciA9PiB7XG5cdFx0Y29uc29sZS5lcnJvcignV2ViU29ja2V0IGVycm9yOicsIGVycm9yLm1lc3NhZ2UpXG5cdH1cbn1cblxuLy8gU3luY2hyb25pemUgdGFzayB1cGRhdGVzIHdpdGggdGhlIHNlcnZlclxuZnVuY3Rpb24gc3luY1dpdGhTZXJ2ZXIoYWN0aW9uLCB0YXNrKSB7XG5cdGlmIChzb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcblx0XHRjb25zdCBtZXNzYWdlID0ge1xuXHRcdFx0dHlwZTogJ3VwZGF0ZVRhc2tzJyxcblx0XHRcdGFjdGlvbixcblx0XHRcdHRhc2ssXG5cdFx0fVxuXHRcdHNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKVxuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUuZXJyb3IoJ1dlYlNvY2tldCBpcyBub3Qgb3Blbi4gTWVzc2FnZSBub3Qgc2VudDonLCB7IGFjdGlvbiwgdGFzayB9KVxuXHR9XG59XG5cbi8vIFVwZGF0ZSB0YXNrIGZyb20gc2VydmVyXG5mdW5jdGlvbiBoYW5kbGVTZXJ2ZXJVcGRhdGUodXBkYXRlZFRhc2spIHtcblx0Y29uc3QgZXhpc3RpbmdUYXNrSW5kZXggPSB0YXNrcy5maW5kSW5kZXgodGFzayA9PiB0YXNrLmlkID09PSB1cGRhdGVkVGFzay5pZClcblx0aWYgKGV4aXN0aW5nVGFza0luZGV4ICE9PSAtMSkge1xuXHRcdHRhc2tzW2V4aXN0aW5nVGFza0luZGV4XSA9IHVwZGF0ZWRUYXNrIC8vIFVwZGF0ZSBleGlzdGluZyB0YXNrXG5cdH0gZWxzZSB7XG5cdFx0dGFza3MucHVzaCh1cGRhdGVkVGFzaykgLy8gQWRkIG5ldyB0YXNrXG5cdH1cblx0c2F2ZVRhc2tzVG9Mb2NhbFN0b3JhZ2UoKVxuXHRyZW5kZXJBbGxUYXNrcygpIC8vIFJlbmRlciBvbmx5IGlmIHRhc2tzIGNoYW5nZVxufVxuXG4vLyBTaG93IGNvbXBsZXRlZCB0YXNrcyAobG9jYWwtb25seSBmdW5jdGlvbmFsaXR5KVxudmlld0NvbXBsZXRlZFRhc2tzQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuXHRjb21wbGV0ZWRUYXNrc1NlY3Rpb24uc3R5bGUuZGlzcGxheSA9ICdibG9jaydcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhc2stbGlzdCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbn0pXG5cbi8vIEJhY2sgdG8gYWN0aXZlIHRhc2tzIChsb2NhbC1vbmx5IGZ1bmN0aW9uYWxpdHkpXG5iYWNrVG9BY3RpdmVUYXNrc0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblx0Y29tcGxldGVkVGFza3NTZWN0aW9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhc2stbGlzdCcpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG59KVxuXG4vLyBIYW5kbGUgZm9ybSBzdWJtaXNzaW9uXG50YXNrRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBldmVudCA9PiB7XG5cdGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuXHRjb25zdCB1bml0TnVtYmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VuaXQtbnVtYmVyJykudmFsdWUudHJpbSgpXG5cdGNvbnN0IGxvY2F0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvY2F0aW9uJykudmFsdWUudHJpbSgpXG5cdGNvbnN0IGFjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhY3Rpb24nKS52YWx1ZVxuXHRjb25zdCBkZXN0aW5hdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXN0aW5hdGlvbicpLnZhbHVlLnRyaW0oKVxuXHRjb25zdCBtZXNzYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3NhZ2UnKS52YWx1ZS50cmltKClcblxuXHRpZiAoIXVuaXROdW1iZXIgfHwgIWxvY2F0aW9uIHx8ICFhY3Rpb24gfHwgIWRlc3RpbmF0aW9uKSB7XG5cdFx0YWxlcnQoJ0FsbCByZXF1aXJlZCBmaWVsZHMgbXVzdCBiZSBmaWxsZWQgb3V0LicpXG5cdFx0cmV0dXJuXG5cdH1cblxuXHRjb25zdCBuZXdUYXNrID0ge1xuXHRcdGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG5cdFx0dW5pdE51bWJlcixcblx0XHRsb2NhdGlvbixcblx0XHRhY3Rpb24sXG5cdFx0ZGVzdGluYXRpb24sXG5cdFx0bWVzc2FnZSxcblx0XHRzdGF0dXM6ICduZXV0cmFsJyxcblx0XHRzdGFydGVkQXQ6IG51bGwsXG5cdFx0Y29tcGxldGVkQXQ6IG51bGwsXG5cdFx0ZHVyYXRpb246IG51bGwsXG5cdH1cblxuXHR0YXNrcy5wdXNoKG5ld1Rhc2spXG5cdHNhdmVUYXNrc1RvTG9jYWxTdG9yYWdlKClcblx0c3luY1dpdGhTZXJ2ZXIoJ2FkZCcsIG5ld1Rhc2spXG5cdHJlbmRlckFsbFRhc2tzKClcblx0dGFza0Zvcm0ucmVzZXQoKVxufSlcblxuLy8gUmVuZGVyIGFsbCB0YXNrc1xuZnVuY3Rpb24gcmVuZGVyQWxsVGFza3MoKSB7XG5cdGNvbnN0IGZpbHRlciA9IGZpbHRlclN0YXR1cy52YWx1ZVxuXHRjb25zdCBzb3J0QnkgPSBzb3J0VGFza3MudmFsdWVcblxuXHRjb25zdCBzb3J0ZWRUYXNrcyA9IFsuLi50YXNrc10uc29ydCgoYSwgYikgPT4ge1xuXHRcdGlmIChzb3J0QnkgPT09ICd1bml0TnVtYmVyJykge1xuXHRcdFx0cmV0dXJuIGEudW5pdE51bWJlci5sb2NhbGVDb21wYXJlKGIudW5pdE51bWJlcilcblx0XHR9IGVsc2UgaWYgKHNvcnRCeSA9PT0gJ2NyZWF0ZWQnKSB7XG5cdFx0XHRyZXR1cm4gYS5pZCAtIGIuaWRcblx0XHR9XG5cdFx0cmV0dXJuIDBcblx0fSlcblxuXHRzb3J0ZWRUYXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuXHRcdGlmIChyZW5kZXJlZFRhc2tJZHMuaGFzKHRhc2suaWQpKSByZXR1cm5cblxuXHRcdGlmIChmaWx0ZXIgPT09ICdhbGwnIHx8IHRhc2suc3RhdHVzID09PSBmaWx0ZXIpIHtcblx0XHRcdGlmICh0YXNrLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcpIHtcblx0XHRcdFx0cmVuZGVyQ29tcGxldGVkVGFzayh0YXNrKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVuZGVyVGFzayh0YXNrKVxuXHRcdFx0fVxuXHRcdH1cblx0fSlcbn1cblxuLy8gUmVuZGVyIGEgc2luZ2xlIGFjdGl2ZSB0YXNrXG5mdW5jdGlvbiByZW5kZXJUYXNrKHRhc2spIHtcblx0aWYgKHJlbmRlcmVkVGFza0lkcy5oYXModGFzay5pZCkpIHJldHVyblxuXG5cdGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKVxuXHRsaS5kYXRhc2V0LmlkID0gdGFzay5pZFxuXHRsaS5jbGFzc0xpc3QuYWRkKHRhc2suc3RhdHVzKVxuXG5cdGxpLmlubmVySFRNTCA9IGBcbiAgICAgICAgPHNwYW4+PHN0cm9uZz4ke3Rhc2sudW5pdE51bWJlcn08L3N0cm9uZz4gLSAke3Rhc2subG9jYXRpb259PC9zcGFuPlxuICAgICAgICA8c3Bhbj4ke3Rhc2suYWN0aW9ufSDihpIgJHt0YXNrLmRlc3RpbmF0aW9ufTwvc3Bhbj5cbiAgICAgICAgPHNwYW4+JHt0YXNrLm1lc3NhZ2UgfHwgJ05vIG1lc3NhZ2UnfTwvc3Bhbj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LW1lc3NhZ2UtYnRuXCI+RWRpdCBNZXNzYWdlPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiaW4tcHJvZ3Jlc3MtYnRuXCI+SW4gUHJvZ3Jlc3M8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJjb21wbGV0ZWQtYnRuXCI+Q29tcGxldGU8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJhdHRlbnRpb24tYnRuXCI+QXR0ZW50aW9uPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgIGBcblx0dGFza0xpc3QuYXBwZW5kQ2hpbGQobGkpXG5cdHJlbmRlcmVkVGFza0lkcy5hZGQodGFzay5pZClcbn1cblxuLy8gUmVuZGVyIGEgc2luZ2xlIGNvbXBsZXRlZCB0YXNrXG5mdW5jdGlvbiByZW5kZXJDb21wbGV0ZWRUYXNrKHRhc2spIHtcblx0aWYgKHJlbmRlcmVkVGFza0lkcy5oYXModGFzay5pZCkpIHJldHVyblxuXG5cdGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKVxuXHRsaS5kYXRhc2V0LmlkID0gdGFzay5pZFxuXHRsaS5jbGFzc0xpc3QuYWRkKCdjb21wbGV0ZWQnKVxuXG5cdGxpLmlubmVySFRNTCA9IGBcbiAgICAgICAgPHNwYW4+PHN0cm9uZz4ke3Rhc2sudW5pdE51bWJlcn08L3N0cm9uZz4gLSAke3Rhc2subG9jYXRpb259PC9zcGFuPlxuICAgICAgICA8c3Bhbj4ke3Rhc2suYWN0aW9ufSDihpIgJHt0YXNrLmRlc3RpbmF0aW9ufTwvc3Bhbj5cbiAgICAgICAgPHNwYW4+JHt0YXNrLm1lc3NhZ2UgfHwgJ05vIG1lc3NhZ2UnfTwvc3Bhbj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlc3RvcmUtYnRuXCI+UmVzdG9yZTwvYnV0dG9uPlxuICAgIGBcblx0Y29tcGxldGVkVGFza0xpc3QuYXBwZW5kQ2hpbGQobGkpXG5cdHJlbmRlcmVkVGFza0lkcy5hZGQodGFzay5pZClcbn1cblxuLy8gVGFzayBsaXN0IGV2ZW50IGRlbGVnYXRpb25cbnRhc2tMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuXHRjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXRcblx0Y29uc3QgdGFza0VsZW1lbnQgPSB0YXJnZXQuY2xvc2VzdCgnbGknKVxuXHRjb25zdCB0YXNrSWQgPSB0YXNrRWxlbWVudC5kYXRhc2V0LmlkXG5cblx0Y29uc3QgdGFzayA9IHRhc2tzLmZpbmQodCA9PiB0LmlkID09PSB0YXNrSWQpXG5cdGlmICghdGFzaykgcmV0dXJuXG5cblx0aWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2VkaXQtbWVzc2FnZS1idG4nKSkge1xuXHRcdGNvbnN0IG5ld01lc3NhZ2UgPSBwcm9tcHQoJ0VudGVyIG5ldyBtZXNzYWdlOicsIHRhc2subWVzc2FnZSB8fCAnJylcblx0XHRpZiAobmV3TWVzc2FnZSAhPT0gbnVsbCkge1xuXHRcdFx0dGFzay5tZXNzYWdlID0gbmV3TWVzc2FnZS50cmltKClcblx0XHRcdHNhdmVUYXNrc1RvTG9jYWxTdG9yYWdlKClcblx0XHRcdHN5bmNXaXRoU2VydmVyKCd1cGRhdGUnLCB0YXNrKVxuXHRcdFx0cmVuZGVyQWxsVGFza3MoKVxuXHRcdH1cblx0fVxufSlcblxuLy8gU2F2ZSB0YXNrcyB0byBMb2NhbFN0b3JhZ2VcbmZ1bmN0aW9uIHNhdmVUYXNrc1RvTG9jYWxTdG9yYWdlKCkge1xuXHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGFza3MnLCBKU09OLnN0cmluZ2lmeSh0YXNrcykpXG59XG5cbi8vIExvYWQgdGFza3MgZnJvbSBMb2NhbFN0b3JhZ2VcbmZ1bmN0aW9uIGxvYWRUYXNrc0Zyb21Mb2NhbFN0b3JhZ2UoKSB7XG5cdGNvbnN0IHNhdmVkVGFza3MgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGFza3MnKVxuXHRyZXR1cm4gc2F2ZWRUYXNrcyA/IEpTT04ucGFyc2Uoc2F2ZWRUYXNrcykgOiBbXVxufVxuXG4vLyBJbml0aWFsaXplIHRhc2tzIG9uIHBhZ2UgbG9hZFxudGFza3MgPSBsb2FkVGFza3NGcm9tTG9jYWxTdG9yYWdlKClcbnJlbmRlckFsbFRhc2tzKClcbmNvbm5lY3RXZWJTb2NrZXQoKVxuIl19
